@using BasketballShopClient.Pages

<header class="header-menu bg-dark text-white">
    <div class="container-fluid d-flex justify-content-between align-items-center">
        <a class="navbar-brand mx-auto" href="/">
            <img src="shoplogo.png" alt="Basketball Shop Logo" class="header-logo"/>
        </a>

        <div class="icons d-flex align-items-center">
            <div class="position-relative">
                @if (FavoritesService.GetFavoritesCount() > 0)
                {
                    <span class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill">
                        @FavoritesService.GetFavoritesCount()
                    </span>
                }
                <i class="bi bi-heart-fill me-3" title="Favorites" @onclick="NavigateToFavorites"></i>
            </div>

            <div class="position-relative">
                @if (CartService.GetCartItemCount() > 0)
                {
                    <span class="badge bg-danger position-absolute top-0 start-100 translate-middle rounded-pill">
                        @CartService.GetCartItemCount()
                    </span>
                }
                <i class="bi bi-cart-fill me-3" title="Cart" @onclick="NavigateToCart"></i>
            </div>

            <div class="dropdown">
                <button class="btn btn-none text-white dropdown-toggle" type="button" id="profileDropdown" data-bs-toggle="dropdown" aria-expanded="false" title="Profile Menu" aria-label="Profile Menu">
                    <i class="bi bi-person-fill"></i>
                    <AuthorizeView>
                        <Authorized>
                            Hello, @context.User.Identity!.Name
                        </Authorized>
                        <NotAuthorized>
                            Hello, Guest
                        </NotAuthorized>
                    </AuthorizeView>
                </button>

                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="profileDropdown">
                    <AuthorizeView>
                        <Authorized>
                            <li>
                                <button class="btn btn-danger btn-none dropdown-item" @onclick="Logout" title="Logout" aria-label="Logout">
                                    <i class="fa fa-lock-open"></i> Logout
                                </button>
                            </li>
                        </Authorized>
                        <NotAuthorized>
                            <li>
                                <button class="btn btn-none dropdown-item" @onclick="() => NavigateTo(login)" title="Login" aria-label="Login">
                                    <i class="fa fa-lock"></i> Login
                                </button>
                            </li>
                            <li>
                                <hr class="dropdown-divider">
                            </li>
                            <li>
                                <button class="btn btn-none dropdown-item" @onclick="() => NavigateTo(register)" title="Register" aria-label="Register">
                                    <i class="fa fa-sign-in-alt"></i> Register
                                </button>
                            </li>
                        </NotAuthorized>
                    </AuthorizeView>
                </ul>
            </div>
        </div>
    </div>
</header>


<nav class="navbar navbar-expand-lg navbar-dark bg-dark">
    <div class="container-fluid">
        <a class="navbar-brand" href="/">Basketball Shop</a>
        <button class="navbar-toggler" type="button" @onclick="ToggleNavMenu">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="@NavMenuCssClass navbar-collapse">
            <ul class="navbar-nav me-auto mb-2 mb-lg-0">
                <li class="nav-item">
                    <NavLink class="nav-link" href="/" Match="NavLinkMatch.All">Home</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/shoes" Match="NavLinkMatch.Prefix">Shoes</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/jerseys" Match="NavLinkMatch.Prefix">Jerseys</NavLink>
                </li>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/accessories" Match="NavLinkMatch.Prefix">Accessories</NavLink>
                </li>
                <AuthorizeView>
                    <Authorized>
                <li class="nav-item">
                    <NavLink class="nav-link" href="/tournaments" Match="NavLinkMatch.Prefix">Games</NavLink>
                </li>
                    </Authorized>
                    <NotAuthorized>
                        <li class="nav-item">
                            <NavLink class="nav-link" href="/identity/account/login" Match="NavLinkMatch.Prefix">Games</NavLink>
                        </li>
                    </NotAuthorized>
                </AuthorizeView>
            </ul>
        </div>
    </div>
</nav>

@code {
    private bool collapseNavMenu = true;

    private string? NavMenuCssClass => collapseNavMenu ? "collapse" : "show";

    private string register = "register";
    private string login = "login";

    protected override void OnInitialized()
    {
        FavoritesService.OnFavoritesChanged += StateHasChanged;
        CartService.OnCartChanged += StateHasChanged;
    }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    private void NavigateTo(string page)
    {
        Navigation.NavigateTo($"identity/account/{page}");
    }

    private void NavigateToFavorites()
    {
        Navigation.NavigateTo("/favorites");
    }

    private void NavigateToCart()
    {
        Navigation.NavigateTo("/cart");
    }

    private async Task Logout()
    {
        var result = await AccountService.Logout();
        if (result.Flag)
        {
            await LocalStorageService.RemoveItemAsync("accessToken");
            await LocalStorageService.RemoveItemAsync("refreshToken");

            var customAuthProvider = AuthenticationStateProvider as CustomAuthenticationStateProvider;
            customAuthProvider?.MarkUserAsLoggedOut();

            Navigation.NavigateTo("/");
        }
        else
        {
            Console.WriteLine(result.Message);
        }
    }
}
