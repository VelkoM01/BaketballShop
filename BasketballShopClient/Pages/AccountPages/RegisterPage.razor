@page "/identity/account/register"

<h3>Register</h3>

@if (!string.IsNullOrEmpty(successMessage))
{
    <div class="alert alert-success">@successMessage</div>
}

@if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="alert alert-danger">@errorMessage</div>
}

<EditForm Model="@User" OnValidSubmit="@HandleRegistration">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="name">Name</label>
        <InputText id="name" class="form-control" @bind-Value="User.Name" />
        <ValidationMessage For="@(() => User.Name)" />
    </div>

    <div class="form-group">
        <label for="email">Email</label>
        <InputText id="email" type="email" class="form-control" @bind-Value="User.Email" />
        <ValidationMessage For="@(() => User.Email)" />
    </div>

    <div class="form-group">
        <label for="password">Password</label>
        <InputText id="password" type="password" class="form-control" @bind-Value="User.Password" />
        <ValidationMessage For="@(() => User.Password)" />
    </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="User.ConfirmPassword" />
        <ValidationMessage For="@(() => User.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@code {
    private UserDTO User = new UserDTO();
    private string? successMessage;
    private string? errorMessage;

    private async Task HandleRegistration()
    {
        successMessage = null;
        errorMessage = null;

        try
        {
            var response = await AccountService.Register(User);

            if (response.Flag)
            {
                successMessage = "Registration successful!";
                User = new UserDTO();
            }
            else
            {
                errorMessage = response.Message ?? "An error occurred during registration.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An unexpected error occurred: {ex.Message}";
        }
    }
}
